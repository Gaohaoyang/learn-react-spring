{"version":3,"sources":["components/BasicsFadeIn.jsx","components/BasicsInnerText.jsx","components/BasicsScrollTop.jsx","components/Basics.jsx","components/Spring3DCard.jsx","components/Spring.jsx","components/Intro.jsx","App.jsx","serviceWorker.js","index.js"],"names":["BasicsFadeIn","props","useSpring","opacity","from","div","style","BasicsInnerText","number","BasicsScrollTop","scroll","scrollTop","height","overflowY","Basics","className","calc","x","y","window","innerHeight","innerWidth","trans","s","Spring3DCard","xys","config","mass","tension","friction","cssProps","set","bind","useDrag","down","movement","console","log","transform","interpolate","Spring","Intro","App","basename","to","exact","path","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"+UAaeA,MAVf,WACE,IAAMC,EAAQC,YAAU,CACtBC,QAAS,EACTC,KAAM,CACJD,QAAS,KAGb,OAAO,kBAAC,IAASE,IAAV,CAAcC,MAAOL,GAArB,mBCOMM,MAdf,WAA4B,IAClBC,EAAWN,YAAU,CAC3BM,OAAQ,GACRJ,KAAM,CACJI,OAAQ,KAHJA,OAMR,OACE,kBAAC,IAASH,IAAV,KACIG,IC6BOC,MArCf,WAA4B,IAClBC,EAAWR,YAAU,CAC3BQ,OAAQ,IACRN,KAAM,CACJM,OAAQ,KAHJA,OAMR,OACE,kBAAC,IAASL,IAAV,CACEM,UAAWD,EACXJ,MAAO,CACLM,OAAQ,QACRC,UAAW,SAGb,gQAGA,+OAGA,iQAGA,mRAGA,8QAGA,0QCwBSC,MApDf,WAiBE,OACE,oCACE,sCACA,yBAAKC,UAAU,SACb,kBAAC,EAAD,OAEF,yBAAKA,UAAU,SACb,kBAAC,EAAD,OAEF,yBAAKA,UAAU,SACb,kBAAC,EAAD,S,gBC3BFC,G,MAAO,SAACC,EAAGC,GAAJ,MAAU,GAAGA,EAAIC,OAAOC,YAAc,GAAK,IAAKH,EAAIE,OAAOE,WAAa,GAAK,GAAI,OACxFC,EAAQ,SAACL,EAAGC,EAAGK,GAAP,2CAA2CN,EAA3C,wBAA4DC,EAA5D,sBAA2EK,EAA3E,MAsCCC,MApCf,WAAwB,MAEEtB,aAAU,iBAAO,CACvCuB,IAAK,CAAC,EAAG,EAAG,GACZC,OAAQ,CACNC,KAAM,EACNC,QAAS,IACTC,SAAU,QAPQ,mBAEfC,EAFe,KAELC,EAFK,KAWhBC,EAAOC,aAAQ,YAAiC,IAA9BC,EAA6B,EAA7BA,KAA6B,gBAAvBC,SAAuB,GAAZlB,EAAY,KAATC,EAAS,KACnDkB,QAAQC,IAAIH,EAAMjB,EAAGC,EAAGF,EAAKC,EAAGC,IAChCa,EAAI,CACFN,IAAKS,EACDlB,EAAKC,EAAGC,GACR,CAAC,EAAG,EAAG,QAIf,OACE,yBAAKH,UAAU,aACb,kBAAC,IAASV,IAAV,iBACM2B,IADN,CAEEjB,UAAU,OAIVT,MAAO,CACLgC,UAAWR,EAASL,IAAIc,YAAYjB,SC1B/BkB,MATf,WACE,OACE,oCACE,sCACA,kBAAC,EAAD,QCISC,MATf,WACE,OACE,oCACE,qCACA,oJC0CSC,MAjCf,WACE,OACE,kBAAC,IAAD,CAAQC,SAAS,uBACf,yBAAK5B,UAAU,gBACb,4BACE,4BACE,kBAAC,IAAD,CAAM6B,GAAG,KAAT,UAEF,4BACE,kBAAC,IAAD,CAAMA,GAAG,WAAT,WAEF,4BACE,kBAAC,IAAD,CAAMA,GAAG,cAAT,gBAIN,yBAAK7B,UAAU,gBACb,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAO8B,OAAK,EAACC,KAAK,KAChB,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,WACV,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,cACV,kBAAC,EAAD,WC5BQC,QACW,cAA7B5B,OAAO6B,SAASC,UAEe,UAA7B9B,OAAO6B,SAASC,UAEhB9B,OAAO6B,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAEP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL3B,QAAQ2B,MAAMA,EAAMC,c","file":"static/js/main.fa67e28c.chunk.js","sourcesContent":["import React from 'react'\nimport { useSpring, animated } from 'react-spring'\n\nfunction BasicsFadeIn() {\n  const props = useSpring({\n    opacity: 1,\n    from: {\n      opacity: 0,\n    },\n  })\n  return <animated.div style={props}>I will fade in</animated.div>\n}\n\nexport default BasicsFadeIn\n","import React from 'react'\nimport { useSpring, animated } from 'react-spring'\n\nfunction BasicsInnerText() {\n  const { number } = useSpring({\n    number: 10,\n    from: {\n      number: 0,\n    },\n  })\n  return (\n    <animated.div>\n      { number }\n    </animated.div>\n  )\n}\n\nexport default BasicsInnerText\n","/* eslint-disable max-len */\nimport React from 'react'\nimport { useSpring, animated } from 'react-spring'\n\nfunction BasicsScrollTop() {\n  const { scroll } = useSpring({\n    scroll: 200,\n    from: {\n      scroll: 0,\n    },\n  })\n  return (\n    <animated.div\n      scrollTop={scroll}\n      style={{\n        height: '100px',\n        overflowY: 'auto',\n      }}\n    >\n      <p>\n        Lorem ipsum dolor sit amet consectetur adipisicing elit. Consequatur saepe in quae dolorum deleniti recusandae, quisquam perspiciatis quod officia quos, nam aliquam! Neque, tempore voluptatum illo libero quos obcaecati ipsum.\n      </p>\n      <p>\n        Lorem ipsum dolor sit, amet consectetur adipisicing elit. Iusto doloribus iure alias eum nemo magni aspernatur facere excepturi ducimus esse quidem, sint assumenda aut rem nobis maxime. Numquam, eligendi hic?\n      </p>\n      <p>\n        Lorem ipsum dolor sit amet consectetur adipisicing elit. Provident, ex ullam. Voluptatem ad quis maiores alias perspiciatis sunt adipisci hic cum quam labore, laudantium reprehenderit optio molestias exercitationem, sed eaque?\n      </p>\n      <p>\n        Lorem ipsum, dolor sit amet consectetur adipisicing elit. Nostrum voluptates quia soluta suscipit porro dolore laborum tempora, repellendus sunt obcaecati quo a aspernatur reprehenderit doloremque repudiandae. Temporibus optio facere provident!\n      </p>\n      <p>\n        Lorem ipsum dolor sit, amet consectetur adipisicing elit. Ipsam quia asperiores quaerat reiciendis magnam perferendis iste veniam atque! Labore assumenda possimus optio veniam maiores culpa distinctio quos accusantium, reiciendis eligendi?\n      </p>\n      <p>\n        Lorem, ipsum dolor sit amet consectetur adipisicing elit. Cum nesciunt, deleniti impedit suscipit laudantium expedita temporibus sapiente harum, sunt cumque architecto est illum quisquam fugiat nostrum quibusdam assumenda ipsam. Rem.\n      </p>\n    </animated.div>\n  )\n}\n\nexport default BasicsScrollTop\n","import React from 'react'\n\nimport BasicsFadeIn from './BasicsFadeIn'\nimport BasicsInnerText from './BasicsInnerText'\nimport BasicsScrollTop from './BasicsScrollTop'\n\nfunction Basics() {\n  // const [clickKeyframes, setClickKeyframes] = useState(false)\n  // const props = useSpring({\n  //   opacity: 1,\n  //   from: {\n  //     opacity: 0,\n  //   },\n  // })\n  // const numberProps = useSpring({\n  //   number: 1,\n  //   from: {\n  //     number: 0,\n  //   },\n  // })\n  // const keyframes = useSpring({\n  //   x: clickKeyframes ? 1 : 0,\n  // })\n  return (\n    <>\n      <h2>Basics</h2>\n      <div className=\"panel\">\n        <BasicsFadeIn />\n      </div>\n      <div className=\"panel\">\n        <BasicsInnerText />\n      </div>\n      <div className=\"panel\">\n        <BasicsScrollTop />\n      </div>\n      {/* <animated.div style={props}>I will fade in</animated.div>\n      <br />\n      <animated.div>{numberProps.number.interpolate((n) => n.toFixed(2))}</animated.div>\n      <br />\n      <animated.div\n        onClick={() => {\n          setClickKeyframes((pre) => !pre)\n        }}\n        style={{\n          transform: keyframes.x\n            .interpolate({\n              range: [0, 0.25, 0.35, 0.45, 0.55, 0.65, 0.75, 1],\n              output: [1, 0.97, 0.9, 1.1, 0.9, 1.1, 1.03, 1],\n            })\n            .interpolate((x) => `scale(${x})`),\n        }}\n      >\n        keyframes Click me!\n      </animated.div> */}\n    </>\n  )\n}\n\nexport default Basics\n","/* eslint-disable react/jsx-props-no-spreading */\nimport React from 'react'\nimport { useDrag } from 'react-use-gesture'\nimport { useSpring, animated } from 'react-spring'\nimport './Spring3DCard.css'\n\nconst calc = (x, y) => [-(y - window.innerHeight / 2) / 20, (x - window.innerWidth / 2) / 20, 1.1]\nconst trans = (x, y, s) => `perspective(600px) rotateX(${x}deg) rotateY(${y}deg) scale(${s})`\n\nfunction Spring3DCard() {\n  // Set the drag hook and define component movement based on gesture data\n  const [cssProps, set] = useSpring(() => ({\n    xys: [0, 0, 1],\n    config: {\n      mass: 5,\n      tension: 350,\n      friction: 40,\n    },\n  }))\n\n  const bind = useDrag(({ down, movement: [x, y] }) => {\n    console.log(down, x, y, calc(x, y))\n    set({\n      xys: down\n        ? calc(x, y)\n        : [0, 0, 1],\n    })\n  })\n\n  return (\n    <div className=\"container\">\n      <animated.div\n        {...bind()}\n        className=\"card\"\n        // onTouchMove={(clientX, clientY) => {\n        //   console.log(clientX, clientY)\n        // }}\n        style={{\n          transform: cssProps.xys.interpolate(trans),\n        }}\n      />\n    </div>\n  )\n}\n\nexport default Spring3DCard\n","import React from 'react'\nimport Spring3DCard from './Spring3DCard'\n\nfunction Spring() {\n  return (\n    <>\n      <h2>Spring</h2>\n      <Spring3DCard />\n    </>\n  )\n}\n\nexport default Spring\n","import React from 'react'\n\nfunction Intro() {\n  return (\n    <>\n      <h2>Intro</h2>\n      <p>本页面主要是我学习和使用 react-spring 时的一些 demo</p>\n    </>\n  )\n}\n\nexport default Intro\n","import React from 'react'\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link,\n} from 'react-router-dom'\n\nimport './base.css'\nimport './App.css'\n\nimport Basics from './components/Basics'\nimport Spring from './components/Spring'\nimport Intro from './components/Intro'\n\nfunction App() {\n  return (\n    <Router basename=\"/learn-react-spring\">\n      <div className=\"content-wrap\">\n        <ul>\n          <li>\n            <Link to=\"/\">Intro</Link>\n          </li>\n          <li>\n            <Link to=\"/Basics\">Basics</Link>\n          </li>\n          <li>\n            <Link to=\"/useSpring\">useSpring</Link>\n          </li>\n        </ul>\n      </div>\n      <div className=\"context-wrap\">\n        <Switch>\n          <Route exact path=\"/\">\n            <Intro />\n          </Route>\n          <Route path=\"/Basics\">\n            <Basics />\n          </Route>\n          <Route path=\"/useSpring\">\n            <Spring />\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n  // eslint-disable-next-line react/jsx-filename-extension\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}